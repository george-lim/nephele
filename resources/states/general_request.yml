name: ${self:custom.generalRequest.name}
definition:
  StartAt: chooseService
  States:
    # Define associated service for function
    chooseService:
      Type: Choice
      Choices:
        - Variable: $.command
          StringEquals: ${self:custom.speedTest.command}
          Next: speedTest
        - Variable: $.command
          StringMatches: ${self:custom.events.putRule.command}*
          Next: eventsPutRule
        - Variable: $.command
          StringEquals: ${self:custom.events.listRules.command}
          Next: eventsListRules
        - Variable: $.command
          StringMatches: ${self:custom.events.enableRule.command}*
          Next: eventsEnableRule
        - Variable: $.command
          StringMatches: ${self:custom.events.disableRule.command}*
          Next: eventsDisableRule
        - Variable: $.command
          StringMatches: ${self:custom.events.deleteRule.command}*
          Next: eventsDeleteRule
        - Or:
          - Variable: $.command
            StringMatches: ${self:custom.epicGames.logIn.command}*
          - Variable: $.command
            StringEquals: ${self:custom.epicGames.getPurchaseUrls.command}
          - Variable: $.command
            StringEquals: ${self:custom.epicGames.purchaseItems.command}
          - Variable: $.command
            StringEquals: ${self:custom.epicGames.logOut.command}
          Next: epicGamesService
        - Or:
          - Variable: $.command
            StringMatches: ${self:custom.kijiji.logIn.command}*
          - Variable: $.command
            StringEquals: ${self:custom.kijiji.uploadAds.command}
          - Variable: $.command
            StringEquals: ${self:custom.kijiji.downloadAds.command}
          - Variable: $.command
            StringEquals: ${self:custom.kijiji.repostAds.command}
          - Variable: $.command
            StringEquals: ${self:custom.kijiji.deleteAds.command}
          - Variable: $.command
            StringEquals: ${self:custom.kijiji.logOut.command}
          Next: kijijiService
        - Or:
          - Variable: $.command
            StringMatches: ${self:custom.textnow.logIn.command}*
          - Variable: $.command
            StringMatches: ${self:custom.textnow.sendMessage.command}*
          - Variable: $.command
            StringEquals: ${self:custom.textnow.logOut.command}
          Next: textnowService
      Default: replyBadRequest
    # Define whether function requires loading state from DynamoDB
    chooseStatefulFunction:
      Type: Choice
      Choices:
        - Or:
          - Variable: $.command
            StringEquals: ${self:custom.epicGames.purchaseItems.command}
          - Variable: $.command
            StringEquals: ${self:custom.kijiji.repostAds.command}
          - Variable: $.command
            StringMatches: ${self:custom.textnow.sendMessage.command}*
          Next: loadState
      Default: chooseServiceFunction
    # Define link between command and function state
    chooseServiceFunction:
      Type: Choice
      Choices:
        - Or:
          - Variable: $.command
            StringMatches: ${self:custom.epicGames.logIn.command}*
          - Variable: $.command
            StringMatches: ${self:custom.textnow.logIn.command}*
          Next: logInNodejs
        - Variable: $.command
          StringMatches: ${self:custom.kijiji.logIn.command}*
          Next: logInPython
        - Variable: $.command
          StringEquals: ${self:custom.epicGames.getPurchaseUrls.command}
          Next: epicGamesGetPurchaseUrls
        - Variable: $.command
          StringEquals: ${self:custom.epicGames.purchaseItems.command}
          Next: epicGamesPurchaseItems
        - Variable: $.command
          StringEquals: ${self:custom.kijiji.uploadAds.command}
          Next: kijijiUploadAds
        - Variable: $.command
          StringEquals: ${self:custom.kijiji.downloadAds.command}
          Next: kijijiDownloadAds
        - Variable: $.command
          StringEquals: ${self:custom.kijiji.repostAds.command}
          Next: kijijiRepostAds
        - Variable: $.command
          StringEquals: ${self:custom.kijiji.deleteAds.command}
          Next: kijijiDeleteAds
        - Variable: $.command
          StringMatches: ${self:custom.textnow.sendMessage.command}*
          Next: textnowSendMessage
        - Variable: $.command
          StringMatches: /logout*
          Next: logOut
      Default: replyBadRequest
    # Define function state
    speedTest:
      Type: Task
      Resource: !GetAtt speedTest.Arn
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: $.error
          Next: replyUnexpectedError
      End: true
      TimeoutSeconds: ${self:functions.speedTest.timeout}
    eventsPutRule:
      Type: Task
      Resource: !GetAtt eventsPutRule.Arn
      End: true
    eventsListRules:
      Type: Task
      Resource: !GetAtt eventsListRules.Arn
      End: true
    eventsEnableRule:
      Type: Task
      Resource: !GetAtt eventsEnableRule.Arn
      End: true
    eventsDisableRule:
      Type: Task
      Resource: !GetAtt eventsDisableRule.Arn
      End: true
    eventsDeleteRule:
      Type: Task
      Resource: !GetAtt eventsDeleteRule.Arn
      End: true
    epicGamesGetPurchaseUrls:
      Type: Task
      Resource: !GetAtt epicGamesGetPurchaseUrls.Arn
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: $.error
          Next: replyUnexpectedError
      End: true
      TimeoutSeconds: ${self:functions.epicGamesGetPurchaseUrls.timeout}
    epicGamesPurchaseItems:
      Type: Task
      Resource: !GetAtt epicGamesPurchaseItems.Arn
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: $.error
          Next: replyUnexpectedError
      ResultPath: $.state
      Next: saveState
      TimeoutSeconds: ${self:functions.epicGamesPurchaseItems.timeout}
    kijijiUploadAds:
      Type: Task
      Resource: !GetAtt uploadFile.Arn
      End: true
    kijijiDownloadAds:
      Type: Task
      Resource: !GetAtt kijijiDownloadAds.Arn
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: $.error
          Next: replyUnexpectedError
      End: true
      TimeoutSeconds: ${self:functions.kijijiDownloadAds.timeout}
    kijijiRepostAds:
      Type: Task
      Resource: !GetAtt kijijiRepostAds.Arn
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: $.error
          Next: replyUnexpectedError
      ResultPath: $.state
      Next: saveState
      TimeoutSeconds: ${self:functions.kijijiRepostAds.timeout}
    kijijiDeleteAds:
      Type: Task
      Resource: !GetAtt kijijiDeleteAds.Arn
      End: true
    textnowSendMessage:
      Type: Task
      Resource: !GetAtt textnowSendMessage.Arn
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: $.error
          Next: replyUnexpectedError
      ResultPath: $.state
      Next: saveState
      TimeoutSeconds: ${self:functions.textnowSendMessage.timeout}
    # Define services
    epicGamesService:
      Type: Pass
      Result: ${self:custom.epicGames.serviceName}
      ResultPath: $.serviceName
      Next: chooseStatefulFunction
    kijijiService:
      Type: Pass
      Result: ${self:custom.kijiji.serviceName}
      ResultPath: $.serviceName
      Next: chooseStatefulFunction
    textnowService:
      Type: Pass
      Result: ${self:custom.textnow.serviceName}
      ResultPath: $.serviceName
      Next: chooseStatefulFunction
    # Loading state flow
    loadState:
      Type: Task
      Resource: arn:aws:states:::dynamodb:getItem
      Parameters:
        TableName: !Ref usersTable
        Key:
          userId:
            S.$: $.interface.userId
        ProjectionExpression.$: $.serviceName
      ResultPath: $.dynamodb
      Next: checkStateExists
    checkStateExists:
      Type: Choice
      Choices:
        - And:
          - Variable: $.serviceName
            StringEquals: ${self:custom.epicGames.serviceName}
          - Variable: $.dynamodb.Item.${self:custom.epicGames.serviceName}.S
            IsPresent: true
          Next: formatEpicGamesState
        - And:
          - Variable: $.serviceName
            StringEquals: ${self:custom.kijiji.serviceName}
          - Variable: $.dynamodb.Item.${self:custom.kijiji.serviceName}.S
            IsPresent: true
          Next: formatKijijiState
        - And:
          - Variable: $.serviceName
            StringEquals: ${self:custom.textnow.serviceName}
          - Variable: $.dynamodb.Item.${self:custom.textnow.serviceName}.S
            IsPresent: true
          Next: formatTextnowState
      Default: setDefaultState
    formatEpicGamesState:
      Type: Pass
      Parameters:
        Item.$: States.StringToJson($.dynamodb.Item.${self:custom.epicGames.serviceName}.S)
      ResultPath: $.dynamodb
      Next: chooseServiceFunction
    # State format for service
    formatKijijiState:
      Type: Pass
      Parameters:
        Item.$: States.StringToJson($.dynamodb.Item.${self:custom.kijiji.serviceName}.S)
      ResultPath: $.dynamodb
      Next: chooseServiceFunction
    formatTextnowState:
      Type: Pass
      Parameters:
        Item.$: States.StringToJson($.dynamodb.Item.${self:custom.textnow.serviceName}.S)
      ResultPath: $.dynamodb
      Next: chooseServiceFunction
    setDefaultState:
      Type: Pass
      Result:
        Item: {}
      ResultPath: $.dynamodb
      Next: chooseServiceFunction
    # System functions
    logInNodejs:
      Type: Task
      Resource: !GetAtt logInNodejs.Arn
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: $.error
          Next: replyUnexpectedError
      ResultPath: $.state
      Next: saveState
      TimeoutSeconds: ${self:functions.logInNodejs.timeout}
    logInPython:
      Type: Task
      Resource: !GetAtt logInPython.Arn
      Catch:
        - ErrorEquals:
            - States.Timeout
          ResultPath: $.error
          Next: replyUnexpectedError
      ResultPath: $.state
      Next: saveState
      TimeoutSeconds: ${self:functions.logInPython.timeout}
    saveState:
      Type: Task
      Resource: arn:aws:states:::dynamodb:updateItem
      Parameters:
        TableName: !Ref usersTable
        Key:
          userId:
            S.$: $.interface.userId
        UpdateExpression.$: States.Format('SET {} = :val', $.serviceName)
        ExpressionAttributeValues:
          :val:
            S.$: States.JsonToString($.state)
      End: true
    logOut:
      Type: Task
      Resource: arn:aws:states:::dynamodb:updateItem
      Parameters:
        TableName: !Ref usersTable
        Key:
          userId:
            S.$: $.interface.userId
        UpdateExpression.$: States.Format('SET {} = :val', $.serviceName)
        ExpressionAttributeValues:
          :val:
            S: '{}'
      ResultPath: $.dynamodb
      Next: replySuccessfulLogOut
    # System reply functions
    replyBadRequest:
      Type: Task
      Resource: !GetAtt replyMessage.Arn
      Parameters:
        interface.$: $.interface
        message: Unrecognized command. Say what?
      End: true
    replySuccessfulLogOut:
      Type: Task
      Resource: !GetAtt replyMessage.Arn
      Parameters:
        interface.$: $.interface
        message: Successfully logged out!
      End: true
    replyUnexpectedError:
      Type: Task
      Resource: !GetAtt replyMessage.Arn
      Parameters:
        interface.$: $.interface
        message: An unexpected error has occurred. Please try again later.
      End: true
