id: TelegramRequest
events:
  - ${file(resources/telegram/execute_api/webhook_event.yml)}
definition:
  StartAt: chooseFunction
  States:
    chooseFunction:
      Type: Choice
      Choices:
        - Or:
          - Variable: $.command
            StringEquals: /start
          - Variable: $.command
            StringEquals: /help
          Next: replyHelp
      Default: deferRequest
    replyHelp:
      Type: Task
      Resource: !GetAtt replyMessage.Arn
      Parameters:
        interface.$: $.interface
        message: |
          I can help you access George's cloud\-compatible side projects\.

          You can control me by sending these commands:

          *Epic Games*
          ${self:custom.epicGames.functions.logIn.command} <username\> <password\> \- ${self:functions.epicGamesLogIn.description}
          ${self:custom.epicGames.functions.listOffers.command} \- ${self:functions.epicGamesListOffers.description}
          ${self:custom.epicGames.functions.purchaseOffers.command} \- ${self:functions.epicGamesPurchaseOffers.description}
          ${self:custom.epicGames.functions.logOut.command} \- ${self:functions.epicGamesLogOut.description}

          *Events*
          ${self:custom.events.functions.putEvent.command} <event name\> <cron expression\> <command \.\.\.\> \- ${self:functions.eventsPutEvent.description}
          ${self:custom.events.functions.listEvents.command} \- ${self:functions.eventsListEvents.description}
          ${self:custom.events.functions.enableEvent.command} <event name\> \- ${self:functions.eventsEnableEvent.description}
          ${self:custom.events.functions.disableEvent.command} <event name\> \- ${self:functions.eventsDisableEvent.description}
          ${self:custom.events.functions.deleteEvent.command} <event name\> \- ${self:functions.eventsDeleteEvent.description}

          *Kijiji*
          ${self:custom.kijiji.functions.logIn.command} <SSID cookie value\> \- ${self:functions.kijijiLogIn.description}
          ${self:custom.kijiji.functions.uploadAds.command} \- ${self:functions.kijijiUploadAds.description}
          ${self:custom.kijiji.functions.downloadAds.command} \- ${self:functions.kijijiDownloadAds.description}
          ${self:custom.kijiji.functions.repostAds.command} \- ${self:functions.kijijiRepostAds.description}
          ${self:custom.kijiji.functions.deleteAds.command} \- ${self:functions.kijijiDeleteAds.description}
          ${self:custom.kijiji.functions.logOut.command} \- ${self:functions.kijijiLogOut.description}

          *TextNow*
          ${self:custom.textnow.functions.logIn.command} <username\> <password\> \- ${self:functions.textnowLogIn.description}
          ${self:custom.textnow.functions.sendTextMessage.command} <recipient\> <message \.\.\.\> \- ${self:functions.textnowSendTextMessage.description}
          ${self:custom.textnow.functions.logOut.command} \- ${self:functions.textnowLogOut.description}
        parseMode: MarkdownV2
      End: true
    deferRequest:
      Type: Task
      Resource: arn:aws:states:::states:startExecution
      Parameters:
        Input.$: $
        StateMachineArn: !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:custom.core.stateMachine.requestName}
      End: true
